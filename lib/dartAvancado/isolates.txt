isolates são a forma que o dart lida com concorrência.
diferente de outras linguagens que usam threads
compartilhando memória, dart usa isolates, que são unidades
independentes de execução com sua própria memória e event loop.

threads são unidades básicas de execução dentro de um processo.
elas compartilham o mesmo espaço de memória do processo principal, o que perite comunicação
rápida entre elas, mas também pode causar condições de corrida (race conditions) e 
outros problemas de concorrências.

Explicação técnica 
um isolate tem seu próprio heap e stack

stack é usado para armazenar:
- variáveis locais
- chamadas de função
- endereços de retorno

características:
- estrutura LIFO (last in, first out)
- alocação e desalocação automática e rápida
- tamanho limitado
- vida curta (enquando a função estiver ativa)

heap é usada para armazenar:
- objetos complexos
- instancias que precisam viver mais tempo
- alocação dinâmicas

características:
- gerenciada por garbage collector (coletor de lixo)
- mais lenta que stack
- tamanho geralmente menor
- permite alocação dinâmica de memória

a comunicação entre isolates ocorre por meio de menssagens (menssagens passing) e
não há compartilhanto direto de memória.
o isolate principal que roda o UI não deve ser bloqueado com tarefas pesadas 
como parsing de JSON gigante ou cálculo matemático pesado.
Para evitar isso, você deve rodar essas tarefas em isolates secundários, 
garantindo uma interface fluída.

quando usar isolates?
- parsing de arquivos grandes (JSON, XML, CSV)
- cálculos matemáticos pesados.
- processamento de imagem (filtros, compressão)
- manipulação de arquivos grandes (leituras, escrita, compressão e gravação)